//Question: https://leetcode.com/problems/top-k-frequent-elements/description/
//Approach using min-heap and unordered_map

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        priority_queue <pair<int, int>, vector<pair<int, int>>, greater<pair<int,int>>> pq;
        unordered_map<int,int> mp;
        vector<int> ans;

        for(int i = 0;i<nums.size();i++){ //O(n)
            mp[nums[i]]++;
         }
        for(auto it = mp.begin();it!=mp.end();it++)
        {
            pq.push(make_pair(it->second,it->first));//O(nlogk)
            if(pq.size()>k)
            pq.pop();
        }

        while(pq.size()>0)
        {
            ans.push_back(pq.top().second);
            pq.pop();
        }

        sort(ans.begin(),ans.end());//O(klogk)
        return ans;
    }
};


================================================================================================================================================================================================================
//Approach2:
/*Intuition
The problem can be solved efficiently using a combination of hash maps and priority queues. We first count the frequency of each number using a hash map.
Then, we use a max heap (priority queue) to maintain the top k frequent elements. By doing this, we can avoid sorting the entire array and achieve a time complexity better than O(n log n).

Approach
Initialize a hash map to count the frequency of each number in the input array.
Initialize a max heap to store the top k frequent elements.
Iterate through the input array and count the frequency of each number.
Iterate through the frequency map and push each element into the max heap.
Keep the size of the max heap equal to k. If it exceeds k, pop the element with the lowest frequency.
Finally, populate the result vector with the top k frequent elements by extracting them from the max heap.

Complexity
Time complexity:
O(n log k), where n is the number of elements in the input array. Building the frequency map takes O(n) time, and each push and pop operation on the priority queue takes O(log k) time. 
Since k is usually much smaller than n, the overall time complexity is dominated by the log k factor.

Space complexity:
O(n) for storing the frequency map and O(k) for the priority queue, hence O(n + k).*/


//Code:

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {

        unordered_map<int,int> mp;
        vector<int> ans;
        priority_queue<pair<int,int>> pq;

        for(int i=0;i<nums.size();i++)
        {
            mp[nums[i]]++;
        }

        for(auto it=mp.begin();it!=mp.end();it++)
        {
            pq.push(make_pair(it->second, it->first));

            if(pq.size() > (int)mp.size() - k) //here code checks for size of priority queue exceeding, that means the most frequent number has come in list, so push_back in ans vector 
            {
                ans.push_back(pq.top().second);
                pq.pop();
                
            }
        }
        return ans;
 }
};
