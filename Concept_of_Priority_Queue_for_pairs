//Concept_of_Priority_Queue_for_pairs

In C++, the std::priority_queue is a container adapter that provides a priority queue based on a heap. 
By default, std::priority_queue is a max heap, meaning elements are ordered in such a way that the largest element is always at the front.
However, you can define a custom comparator to create a min heap or to change the sorting criteria.

Here's how you can use std::priority_queue with pairs:

#include <iostream>
#include <queue>
#include <vector>

using namespace std;

int main() {
    // Define a priority queue of pairs with a custom comparator
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

    // Insert elements into the priority queue
    pq.push({5, 10});
    pq.push({2, 8});
    pq.push({7, 6});
    pq.push({3, 8});
    pq.push({1, 6});

    // Print elements from the priority queue
    cout << "Priority Queue of pairs:" << endl;
    while (!pq.empty()) {
        cout << "(" << pq.top().first << ", " << pq.top().second << ") ";
        pq.pop();
    }
    cout << endl;

    return 0;
}

In this code:

We define a std::priority_queue named pq to hold pairs of integers.
The second template argument vector<pair<int, int>> specifies the underlying container type. We use a std::vector to store the elements.
The third template argument greater<pair<int, int>> is a comparator that orders elements in ascending order. 
It ensures that the smaller pair (based on the first element) comes to the top of the priority queue.
We insert pairs into the priority queue using the push function.
We print the pairs from the priority queue. Since the pairs are sorted in ascending order according to the first element, we get the elements in the desired order.
So, by using std::priority_queue with a custom comparator greater<pair<int, int>>, you can sort pairs based on your desired criteria.
In this example, the pairs are sorted in ascending order based on the first element.

The output of the provided code will be:
Priority Queue of pairs:
(1, 6) (2, 8) (3, 8) (5, 10) (7, 6) 

Explanation:

The pairs are sorted in ascending order based on the first element.
When popping elements from the priority queue, the smaller pairs (based on the first element) 
come out first due to the custom comparator greater<pair<int, int>>.

For default priority_queue acts as max heap. Code for the same is:
#include <iostream>
#include <queue>
#include <vector>

using namespace std;

int main() {
    // Define a priority queue of pairs with a custom comparator
    priority_queue<pair<int, int>> pq;

    // Insert elements into the priority queue
    pq.push({5, 10});
    pq.push({2, 8});
    pq.push({7, 6});
    pq.push({3, 8});
    pq.push({1, 6});

    // Print elements from the priority queue
    cout << "Priority Queue of pairs:" << endl;
    while (!pq.empty()) {
        cout << "(" << pq.top().first << ", " << pq.top().second << ") ";
        pq.pop();
    }
    cout << endl;

    return 0;
}

O/P:
Priority Queue of pairs:
(7, 6) (5, 10) (3, 8) (2, 8) (1, 6) 

Here the elements are printed in descending order( sorted in descending order of first element of the pair)



