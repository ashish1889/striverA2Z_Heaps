//Video: https://www.youtube.com/watch?v=1zktEppsdig
//Ques: https://www.codingninjas.com/studio/problems/flatten-a-linked-list_1112655?utm_source=youtube&utm_medium=affiliate&utm_campaign=Codestudio_Linkedlistseries

//TC-> O(N*k)+O(mlogm)+O(m)  (m=N*k)
//SC-> O(m)+O(m)
//Bruteforce:

vector<int> arr;

for(int i = 0;i<lists.size();i++)
{
Node *temp = lists[i];

while(temp!=NULL)
{
	arr.add(temp);
	temp = temp->next;
}



}
 sort(arr.begin(),arr.end());
 std::list<int> ints;
 ints.assign(std::begin(arr), std::end(arr));
 return ints.first();
 
//Sort list inplace:

Will take O(N^3)
Merge two lists.
Take head = list[0];
for(int i = 1;i<list.size();i++)
{
merge2list(head,list[i]);

}

//Approach using min heap:

//TC: O(klogk)+O(N*klogk)
//SC: O(k)

Node* mergeKLists(vector<Node*> &listArray){
priority_queue<pair<int,Node*>,vector<pair<int,Node*>>,greater<pair<int,Node*>>> pq;
for(int i = 0;i<listArray.size();i++)
{
if(listArray[i])
{
pq.push({listArray[i]->data,listArray[i]});
}
}

Node* dummyNode = new Node(-1);
Node* temp = dummyNode;

while(!pq.empty()){
auto it = pq.top();
pq.pop();

if(it.second->next)
pq.push({it.second->next.data,it.second->next});
temp->next = it.second;
temp = temp->next;
}
return dummyNode->next;
}
