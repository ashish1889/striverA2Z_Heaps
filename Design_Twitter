// Question: https://leetcode.com/problems/design-twitter/description/

//C++ code1:

 class Twitter {
public:
    unordered_map<int,unordered_set<int>>ds;
    //This Data Structure will store list of twitter users and corresponding to each user there will be a set consiting of userid whom the user follow;
    vector<pair<int,int>>posts;
    //this vector will store the list of posts ::each post will have a tweetId and
    //the userId of the user Who posted it
    Twitter() {
        
    }
    
    void postTweet(int userId, int tweetId) {

        posts.push_back({tweetId,userId});
    }
    
    vector<int> getNewsFeed(int userId) {
        //If current user tries to retrieve 10 most recent post then he will be able to retrieve the posts
		//that he himself posted or the post posted by another user whom current user follow
        vector<int>ans;

        //Iterate from last of posts since we want most recent
        int count=1;
        for(int i=posts.size()-1;i>=0&&count<=10;i--){
            int Post_UserId=posts[i].second;
            int post_Id=posts[i].first;
            if(Post_UserId==userId||ds[userId].find(Post_UserId)!=ds[userId].end()){
                ans.push_back(post_Id);
                count++;
            }
        }
        return ans;
    }
    
    void follow(int followerId, int followeeId) {
        //If A follows B then in a set corresponding to A  insert B
        ds[followerId].insert(followeeId);
    }
    
    void unfollow(int followerId, int followeeId) {
        //If A unfollows B then from a set corresponding to A remove B
        ds[followerId].erase(followeeId);
    }
};

=================================================================================================================================================
//Video: https://www.youtube.com/watch?v=79GQ1jNi7lU
//C++ code2:


class Twitter {
public:
   vector<pair<int,int>> posts;
   map<int,set<int>> followers;
    Twitter() {
        
    }
    
    void postTweet(int userId, int tweetId) {

        posts.push_back({userId,tweetId});
    }
    
    vector<int> getNewsFeed(int userId) {
       
        vector<int>ans;

        
        for(auto p = posts.rbegin();p!=posts.rend();++p)
		{
		if(ans.size()==10)
		break;
		auto user = followers[userId];
		if(user.find(p->first)!=user.end()||p->first == userId)
		{
		ans.push_back(userId);
		}
		}
        return ans;
    }
    
    void follow(int followerId, int followeeId) {
        //If A follows B then in a set corresponding to A  insert B
        followers[followerId].insert(followeeId);
    }
    
    void unfollow(int followerId, int followeeId) {
        //If A unfollows B then from a set corresponding to A remove B
        followers[followerId].erase(followeeId);
    }
};

===============================================================================================

//Java code

public class Twitter {
	private static int timeStamp=0;

	// easy to find if user exist
	private Map<Integer, User> userMap;

	// Tweet link to next Tweet so that we can save a lot of time
	// when we execute getNewsFeed(userId)
	private class Tweet{
		public int id;
		public int time;
		public Tweet next;

		public Tweet(int id){
			this.id = id;
			time = timeStamp++;
			next=null;
		}
	}


	// OO design so User can follow, unfollow and post itself
	public class User{
		public int id;
		public Set<Integer> followed;
		public Tweet tweet_head;

		public User(int id){
			this.id=id;
			followed = new HashSet<>();
			follow(id); // first follow itself
			tweet_head = null;
		}

		public void follow(int id){
			followed.add(id);
		}

		public void unfollow(int id){
			followed.remove(id);
		}


		// everytime user post a new tweet, add it to the head of tweet list.
		public void post(int id){
			Tweet t = new Tweet(id);
			t.next=tweet_head;
			tweet_head=t;
		}
	}




	/** Initialize your data structure here. */
	public Twitter() {
		userMap = new HashMap<Integer, User>();
	}

	/** Compose a new tweet. */
	public void postTweet(int userId, int tweetId) {
		if(!userMap.containsKey(userId)){
			User u = new User(userId);
			userMap.put(userId, u);
		}
		userMap.get(userId).post(tweetId);

	}



	// Best part of this.
	// first get all tweets lists from one user including itself and all people it followed.
	// Second add all heads into a max heap. Every time we poll a tweet with 
	// largest time stamp from the heap, then we add its next tweet into the heap.
	// So after adding all heads we only need to add 9 tweets at most into this 
	// heap before we get the 10 most recent tweet.
	public List<Integer> getNewsFeed(int userId) {
		List<Integer> res = new LinkedList<>();

		if(!userMap.containsKey(userId))   return res;

		Set<Integer> users = userMap.get(userId).followed;
		PriorityQueue<Tweet> q = new PriorityQueue<Tweet>(users.size(), (a,b)->(b.time-a.time));
		for(int user: users){
			Tweet t = userMap.get(user).tweet_head;
			// very imporant! If we add null to the head we are screwed.
			if(t!=null){
				q.add(t);
			}
		}
		int n=0;
		while(!q.isEmpty() && n<10){
		  Tweet t = q.poll();
		  res.add(t.id);
		  n++;
		  if(t.next!=null)
			q.add(t.next);
		}

		return res;

	}

	/** Follower follows a followee. If the operation is invalid, it should be a no-op. */
	public void follow(int followerId, int followeeId) {
		if(!userMap.containsKey(followerId)){
			User u = new User(followerId);
			userMap.put(followerId, u);
		}
		if(!userMap.containsKey(followeeId)){
			User u = new User(followeeId);
			userMap.put(followeeId, u);
		}
		userMap.get(followerId).follow(followeeId);
	}

	/** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */
	public void unfollow(int followerId, int followeeId) {
		if(!userMap.containsKey(followerId) || followerId==followeeId)
			return;
		userMap.get(followerId).unfollow(followeeId);
	}
}

/**
 * Your Twitter object will be instantiated and called as such:
 * Twitter obj = new Twitter();
 * obj.postTweet(userId,tweetId);
 * List<Integer> param_2 = obj.getNewsFeed(userId);
 * obj.follow(followerId,followeeId);
 * obj.unfollow(followerId,followeeId);
 */
